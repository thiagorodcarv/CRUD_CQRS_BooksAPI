// <auto-generated />
using System;
using CleanArch.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CleanArch.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250608214545_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CleanArch.Domain.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Janis"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Elvis"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Tolkien"
                        });
                });

            modelBuilder.Entity("CleanArch.Domain.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int?>("GenrerId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenrerId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("CleanArch.Domain.Entities.Genrer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Genrers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Ficção Científica"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Fantasia"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Terror"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Mistério"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Aventura"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Biografia"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Distopia"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Histórico"
                        });
                });

            modelBuilder.Entity("CleanArch.Domain.Entities.Book", b =>
                {
                    b.HasOne("CleanArch.Domain.Entities.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("CleanArch.Domain.Entities.Genrer", null)
                        .WithMany()
                        .HasForeignKey("GenrerId");
                });
#pragma warning restore 612, 618
        }
    }
}
